#version 330 core

//struct def
struct pointLight
{
	vec3 vsPos;
	vec2 attenuations; //linear, quadratic, assuming constant is 1.0
	float radius; //light's cutoff
	vec3 lightColour;
};

struct directionalLight
{
	vec3 vsNormal;
	vec4 lightColour;
	float intensity;
};

struct plane
{
	vec3 vsNormal;
	float d;
};

uniform vec3 mainFrustrumCBL;
uniform vec2 frustrumDimensions;
uniform ivec2 windowDimensions;

uniform float projectionConstantA; //f / (f - n)
uniform float projectionConstantB; //(-f * n) / (f - n)

uniform vec3 pLightPos[128];
uniform vec3 pLightAtt[128]; //linear quadratic radius
uniform vec3 pLightColour[128];
uniform int numPLights;

layout(binding = 0, rgba32f) uniform readonly image2D specularShape;
layout(binding = 1, rgba32f) uniform readonly image2D depthSampler;
layout(binding = 2, rgb10_a2) uniform readonly image2D normalSampler;

layout(binding = 3, rgba8) uniform writeonly image2D out_diffuseAccumulation;
layout(binding = 4, rgba8) uniform writeonly image2D out_specularAccumulation;

plane getPlane(vec3 vsNorm, vec3 vsPoint)
{
	return plane(vsNorm, - dot(vsNorm, vsPoint));
}

float signedDistance(vec3 vsPos, plane cullPlane)
{
	return (dot(cullPlane.vsNormal, vsPos) + cullPlane.d);
}

void main()
{
	ivec2 pixel = vec2(gl_GlobalInvocationID.xy) / vec2(windowDimensions);
	vec2 numTiles = vec2(windowDimensions / ivec2(16, 16));
	ivec2 tile = ivec2(pixel * numTiles);
	vec3 vsViewRay = vec3(mainFrustrumCBL.xy + (frustrumDimensions * pixel), -mainFrustrumCBL.z);
	
	float depth = imageLoad(depthSampler, pixel).r;
	depth = projectionConstantB / (depth - projectionConstantA);
	vec3 vsPosition = vsViewRay * depth;
	//vsPosition.z *= -1;

	vec4 normal = imageLoad(normalSampler, pixel) * 2.0 - 1.0;
	normal.z = sqrt(1.0 - pow(normal.x, 2) - pow(normal.y, 2)) * normal.w;
	normal.w = 0.0;
	/*
	vec3 frustC[4]; //00 10 11 01
	frustC[0] = vec3(mainFrustrumCBL.xy + (frustrumDimensions * (vec2(tile) / numTiles)), -mainFrustrumCBL.z);
	frustC[1] = vec3(mainFrustrumCBL.xy + (frustrumDimensions * (vec2(tile.x + 1, tile.y) / numTiles)), -mainFrustrumCBL.z);
	frustC[2] = vec3(mainFrustrumCBL.xy + (frustrumDimensions * (vec2(tile + ivec2(1)) / numTiles)), -mainFrustrumCBL.z);
	frustC[3] = vec3(mainFrustrumCBL.xy + (frustrumDimensions * (vec2(tile.x, tile.y + 1) / numTiles)), -mainFrustrumCBL.z);

	plane frustrum[6]; //n f l r t d(near is closer to camera)
	frustrum[0] = getPlane(vec3(0.0, 0.0, -1.0), vec3(0.0, 0.0, -(projectionConstantB / (0.0 - projectionConstantA))));
	frustrum[1] = getPlane(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, -(projectionConstantB / (1.0 - projectionConstantA))));
	frustrum[2] = getPlane(cross(frustC[0], vec3(0.0, 1.0, 0.0)), frustC[0]);
	frustrum[3] = getPlane(cross(vec3(0.0, 1.0, 0.0), frustC[2]), frustC[2]);
	frustrum[4] = getPlane(cross(frustC[3], vec3(1.0, 0.0, 0.0)), frustC[3]);
	frustrum[5] = getPlane(cross(vec3(1.0, 0.0, 0.0), frustC[1]), frustC[1]);
	
	int pointLCount = 0;
	int pointLIndices[128];

	for(int count = 0; count < numPLights; ++count)
	{
		bool temp = true;
		vec3 tempPos = pLightPos[count];
		float tempRad = pLightAtt[count].z;
		for(int i = 0; i < 6; ++i)
		{
			if ((dot(frustrum[i].vsNormal, tempPos) + frustrum[i].d) < -tempRad)
			{
				temp = false;
			}
		}
		if (temp)
		{
			pointLIndices[pointLCount] = count;
			++pointLCount;
		}
	}
	*/
	pointLight currentLight;
	for (int i = 0; i < numPLights; ++i)
	{
		//setup
		currentLight = pointLight(pLightPos[i], vec2(pLightAtt[i].xy), pLightAtt[i].z, pLightColour[i]);
		vec3 lP = currentLight.vsPos - vsPosition;
		float distance = length(lP);

		if(distance <= currentLight.radius)
		{
			//diffuse term.
			vec3 N = normal.xyz;
			vec3 L = normalize(lP);
			float attenuation = 1.0 / (1.0 + currentLight.attenuations.x * distance + currentLight.attenuations.y * distance * distance);
			float NdotL = max(dot(N, L), 0.0);
			out_diffuseAccumulation.rgb += NdotL * currentLight.lightColour * attenuation;

			//specular term
			vec3 V = normalize(vec3(0.0) - vsPosition);
			vec3 R = reflect(-L, N); //Phong Lighting Model.
			float RdotV = 1.0 - acos(max(dot(R, V), 0.0)) / 1.570796;

			out_specularAccumulation.rgb += imageLoad(specularShape, vec2(1.0 - RdotV, 0.8)).rgb * currentLight.lightColour * attenuation;
		}
	}
}